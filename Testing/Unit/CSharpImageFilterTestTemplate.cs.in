/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at CSharpImageFilterTestTemplate.cs.in to make changes.
 */

// This is C# code to test ${name}
using System;
using itk.simple;

public class Test${name}ImageFilter {

    public static int Main(string[] args) {

        try {

            // Get the right number of inputs
            int inputs = 1;
$(if number_of_inputs then
            OUT=[[
            inputs = ${number_of_inputs};]]
end)

            // Check the command line arguments
            if ( args.Length < inputs + 1 ) {
                Console.WriteLine("Usage: ${name} tag <input(s)> output");
                return 1;
            }

            String tag = args[1];

            // Instantiate objects
            ImageFileReader reader = new ImageFileReader();
            ImageFileWriter writer = new ImageFileWriter();
            ${name}ImageFilter filter = new ${name}ImageFilter();
$(if #tests == 0 then
            OUT=[[
            // No tests defined => exit with error code
            Console.WriteLine ( "No tests defined!" );
            return 1;]]
end)
            // Run each test
$(foreach tests
            if (tag.Equals( "${tag}" )) {
                // Read image(s)
                Image inputA = reader.SetFileName( args[2] ).Execute();

$(if inputA_cast then
                 OUT=[[
                 CastImageFilter caster = new CastImageFilter();
                 caster.SetOutputPixelType( PixelIDValueEnum.${inputA_cast}.swigValue );
                 inputA = caster.Execute( inputA );]]                
end)

$(if inputB then
                OUT=[[
                Image inputB = reader.SetFileName ( args[3] ).Execute();

]]
end)
$(when settings
                // Set parameters
$(foreach settings
$(if parameter == "SeedList" then
                OUT=[[
                filter.ClearSeeds();
$(for i=1,#value do OUT=OUT .. "\
                {\
                VectorUInt32 idx = new VectorUInt32( new uint[] " .. value[i] .. " );\
                filter.AddSeed( idx );\
                }\
" end)]]
elseif parameter == "TrialPoints" then
                OUT=[[
                filter.ClearTrialPoints();
$(for i=1,#value do OUT=OUT .. "\
                {\
                VectorUInt32 idx = new VectorUInt32( new uint[] " .. value[i] .. " );\
                filter.AddTrialPoint( idx );\
                }\
" end)]]
elseif dim_vec == 1 then
                OUT=[[
                {
                $(if type == "bool" then
                    OUT="VectorBool idx = new VectorBool( new bool[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "unsigned int" then
                    OUT="VectorUInt32 idx = new VectorUInt32( new uint[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "int" then
                    OUT="VectorInt32 idx = new VectorInt32( new int[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "unsigned long" then
                    OUT="VectorULong idx = new VectorULong( new ulong[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "long" then
                    OUT="VectorLong idx = new VectorLong( new long[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "unsigned short" then
                    OUT="VectorUShort idx = new VectorUShort( new ushort[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "short" then
                    OUT="VectorShort idx = new VectorShort( new short[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "float" then
                    OUT="VectorFloat idx = new VectorFloat( new float[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "double" then
                    OUT="VectorDouble idx = new VectorDouble( new double[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "uint8_t" then
                    OUT="VectorUInt8 idx = new VectorUInt8( new byte[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "uint16_t" then
                    OUT="VectorUInt16 idx = new VectorUInt16( new ushort[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "uint32_t" then
                    OUT="VectorUInt32 idx = new VectorUInt32( new uint[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "uint64_t" then
                    OUT="VectorUInt64 idx = new VectorUInt64( new ulong[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "int8_t" then
                    OUT="VectorInt8 idx = new VectorInt8( new sbyte[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "int16_t" then
                    OUT="VectorInt16 idx = new VectorInt16( new short[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "int32_t" then
                    OUT="VectorInt32 idx = new VectorInt32( new int[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                elseif type == "int64_t" then
                    OUT="VectorInt64 idx = new VectorInt64( new long[] $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );"
                end)
                filter.Set${parameter}( idx );
                }]]
else
                OUT=[[
                filter.Set${parameter}( $(if csharp_value then OUT='${csharp_value}' else OUT='${value}' end) );]]
end)
)
)
                // Run the filter
$(if inputB then
                OUT=[[
                Image output = filter.Execute ( inputA, inputB );]]
else
                OUT=[[
                Image output = filter.Execute ( inputA );]]
end)

                // Write output
                writer.SetFileName( args[args.Length-1] ).Execute( output );
            }
)
        } catch (Exception ex) {
            Console.WriteLine( "ERROR: " + ex.ToString() );
            return 1;
        }
        return 0;
    }
}
