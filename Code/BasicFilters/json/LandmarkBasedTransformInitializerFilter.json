{
  "name" : "LandmarkBasedTransformInitializerFilter",
  "template_code_filename" : "ImageFilter",
  "doc" : "",
  "number_of_inputs" : 0,
  "output_image_type" : "float",
  "pixel_types" : "typelist::MakeTypeList<BasicPixelID<float> >::Type",
  "filter_type" : "itk::LandmarkBasedTransformInitializer< itk::AffineTransform< double, TImageType::ImageDimension  >, TImageType, TImageType>",
  "include_files" : [
    "sitkTransform.h"
  ],
  "inputs" : [
    {
      "name" : "Transform",
      "type" : "Transform",
      "custom_itk_cast" : "const typename FilterType::TransformType *itkTx = dynamic_cast<const typename FilterType::TransformType *>(inTransform->GetITKBase() );\n  if ( !itkTx )\n    {\n    sitkExceptionMacro( \"Unexpected error converting transform! Possible miss matching dimensions!\" );\n    }\n  else { filter->SetTransform( const_cast<typename FilterType::TransformType*>(itkTx) ); }"
    }
  ],
  "members" : [
    {
      "name" : "FixedLandmarks",
      "type" : "std::vector<double>",
      "default" : "std::vector<double>()",
      "doc" : "",
      "itk_type" : "LandmarkPointContainer",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set the Fixed landmark point containers",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get the shrink factors."
    },
    {
      "name" : "MovingLandmarks",
      "type" : "std::vector<double>",
      "default" : "std::vector<double>()",
      "doc" : "",
      "itk_type" : "LandmarkPointContainer",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set the Moving landmark point containers",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get the shrink factors."
    },
    {
      "name" : "LandmarkWeight",
      "type" : "std::vector<double>",
      "default" : "std::vector<double>()",
      "doc" : "",
      "itk_type" : "LandmarkWeight",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set the landmark weight point containers Weight includes diagonal elements of weight matrix",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Get the shrink factors."
    },
    {
      "name" : "ReferenceImage",
      "type" : "Image",
      "default" : "Image()",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set the reference image to define the parametric domain for the BSpline transform"
    },
    {
      "name" : "BSplineNumberOfControlPoints",
      "type" : "unsigned int",
      "default" : "4u",
      "briefdescriptionSet" : "",
      "detaileddescriptionSet" : "Set/Get the number of iterations",
      "briefdescriptionGet" : "",
      "detaileddescriptionGet" : "Set/Get the number of iterations"
    }
  ],
  "briefdescription" : "",
  "detaileddescription" : "This class computes the transform that aligns the fixed and moving images given a set of pair landmarks. The class is templated over the Transform type as well as fixed image and moving image types. The transform computed gives the best fit transform that maps the fixed and moving images in a least squares sense. The indices are taken to correspond, so point 1 in the first set will get mapped close to point 1 in the second set, etc.\n\nCurrently, the following transforms are supported by the class: VersorRigid3DTransform Rigid2DTransform AffineTransform BSplineTransform \n\nAn equal number of fixed and moving landmarks need to be specified using SetFixedLandmarks() and SetMovingLandmarks() . Any number of landmarks may be specified. In the case of using Affine or BSpline transforms, each landmark pair can contribute in the final transform based on its defined weight. Number of weights should be equal to the number of landmarks and can be specified using SetLandmarkWeight() . By defaults are weights are set to one. Call InitializeTransform() to initialize the transform.\n\nThe class is based in part on Hybrid/vtkLandmarkTransform originally implemented in python by David G. Gobbi.\n\nThe solution is based on Berthold K. P. Horn (1987), \"Closed-form solution of absolute orientation\nusing unit quaternions,\" http://people.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf \n\nThe Affine Transform initializer is based on an algorithm by H Spaeth, and is described in the Insight Journal Article \"Affine Transformation for Landmark Based Registration Initializer\nin ITK\" by Kim E.Y., Johnson H., Williams N. available at http://midasjournal.com/browse/publication/825 \n\n\\par Wiki Examples:\n\n\\li All Examples \n\n\\li Rigidly register one image to another using manually specified landmarks"
}
