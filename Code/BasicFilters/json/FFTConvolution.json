{
  "name" : "FFTConvolution",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "BasicPixelIDTypeList",
  "public_declarations" : "    typedef enum { SAME = 0, VALID = 1} OutputRegionModeType;",
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetKernelImage( image2 );",
  "members" : [ {
    "name" : "Normalize",
    "type" : "bool",
    "default" : "false",
    "doc" : ""
  }, {
    "name" : "OutputRegionMode",
    "type" : "FFTConvolutionImageFilter::OutputRegionModeType",
    "default" : "itk::simple::FFTConvolutionImageFilter::SAME",
    "custom_itk_cast" : "filter->SetOutputRegionMode( typename FilterType::OutputRegionModeType( int( this->m_OutputRegionMode ) ) );"
  } ],
  "tests" : [ {
    "tag" : "defaults",
    "description" : "Basic convolution with gaussian",
    "inputA" : "Input/cthead1-Float.mha",
    "inputB" : "Input/Gaussian_1.5.nrrd",
    "settings" : [ ],
    "tolerance" : "0.0001"
  } ],
  "briefdescription" : "Convolve a given image with an arbitrary image kernel using multiplication in the Fourier domain.\n",
  "detaileddescription" : "This filter produces output equivalent to the output of the ConvolutionImageFilter. However, it takes advantage of the convolution theorem to accelerate the convolution computation when the kernel is large.\n\\warning This filter ignores the spacing, origin, and orientation of the kernel image and treats them as identical to those in the input image.\nThis code was adapted from the Insight Journal contribution:\n\"FFT Based Convolution\" by Gaetan Lehmannhttp://hdl.handle.net/10380/3154\n\\see  ConvolutionImageFilter\n\n"
}