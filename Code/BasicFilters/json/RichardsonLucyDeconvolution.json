{
  "name" : "RichardsonLucyDeconvolution",
  "template_code_filename" : "ImageFilter",
  "template_test_filename" : "ImageFilter",
  "number_of_inputs" : 2,
  "doc" : "Some global documentation",
  "pixel_types" : "BasicPixelIDTypeList",
  "include_files" : [ "itkConstantBoundaryCondition.h", "itkPeriodicBoundaryCondition.h", "itkZeroFluxNeumannBoundaryCondition.h" ],
  "public_declarations" : "    typedef enum { SAME = 0, VALID = 1} OutputRegionModeType;\n    typedef enum { ZERO_PAD = 0, ZERO_FLUX_NEUMANN_PAD = 1, PERIODIC_PAD = 2 } BoundaryConditionType;",
  "custom_set_input" : "filter->SetInput( image1 ); filter->SetKernelImage( image2 );",
  "members" : [ {
    "name" : "NumberOfIterations",
    "type" : "int",
    "default" : "1",
    "briefdescriptionSet" : "",
    "detaileddescriptionSet" : "Set the number of iterations.",
    "briefdescriptionGet" : "",
    "detaileddescriptionGet" : "Get the number of iterations."
  }, {
    "name" : "Normalize",
    "type" : "bool",
    "default" : "false",
    "doc" : "",
    "briefdescriptionSet" : "",
    "detaileddescriptionSet" : "Normalize the output image by the sum of the kernel components\n",
    "briefdescriptionGet" : "",
    "detaileddescriptionGet" : ""
  }, {
    "name" : "BoundaryCondition",
    "type" : "RichardsonLucyDeconvolutionImageFilter::BoundaryConditionType",
    "default" : "itk::simple::RichardsonLucyDeconvolutionImageFilter::ZERO_FLUX_NEUMANN_PAD",
    "custom_itk_cast" : "itk::ConstantBoundaryCondition< InputImageType > cbc;\n  itk::ZeroFluxNeumannBoundaryCondition< InputImageType > zbc;\n  itk::PeriodicBoundaryCondition< InputImageType > pbc;\n  switch ( m_BoundaryCondition )\n    {\n    case ZERO_PAD:\n    {\n    filter->SetBoundaryCondition( &cbc );\n    }\n    break;\n\n    case ZERO_FLUX_NEUMANN_PAD:\n    {\n    filter->SetBoundaryCondition( &zbc );\n    }\n    break;\n\n    case PERIODIC_PAD:\n    {\n    filter->SetBoundaryCondition( &pbc );\n    }\n    break;\n }"
  }, {
    "name" : "OutputRegionMode",
    "type" : "RichardsonLucyDeconvolutionImageFilter::OutputRegionModeType",
    "default" : "itk::simple::RichardsonLucyDeconvolutionImageFilter::SAME",
    "custom_itk_cast" : "filter->SetOutputRegionMode( typename FilterType::OutputRegionModeType( int( this->m_OutputRegionMode ) ) );"
  } ],
  "tests" : [ {
    "tag" : "defaults",
    "description" : "Richardson-Lucy deconvolution of image blurred with a Gaussian kernel",
    "inputA" : "Input/DeconvolutionInput.nrrd",
    "inputB" : "Input/DeconvolutionKernel.nrrd",
    "settings" : [ {
      "parameter" : "Normalize",
      "value" : "true",
      "python_value" : "True"
    } ],
    "tolerance" : "0.0001"
  } ],
  "briefdescription" : "Deconvolve an image using the Richardson-Lucy deconvolution algorithm.",
  "detaileddescription" : " * This filter implements the Richardson-Lucy deconvolution algorithm as defined in Bertero M and Boccacci P, \"Introduction to Inverse Problems in Imaging\", 1998. The algorithm assumes that the input image has been formed by a linear shift-invariant system with a known kernel.\nThe Richardson-Lucy algorithm assumes that noise in the image follows a Poisson distribution and that the distribution for each pixel is independent of the other pixels.\nThis code was adapted from the Insight Journal contribution:\n \"Deconvolution: infrastructure and reference algorithms\" by Gaetan Lehmann\nhttp://hdl.handle.net/10380/3207\n\author Gaeten Lehmann, Biologie du Developpement et de la Reproduction, INRA de Jouy-en-Josas, France\n\author Cory Quammen, The University of North Carolina at Chapel Hill"
}
