/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkImageFilterTemplate.cxx.in to make changes.
 */

#include "itkImage.h"
#include "itkVectorImage.h"
#include "itkLabelMap.h"
#include "itkLabelObject.h"
#include "itkNumericTraits.h"
#include "itkNumericTraitsVariableLengthVectorPixel.h"
#include "itkVectorIndexSelectionCastImageFilter.h"
#include "itkComposeImageFilter.h"

#include "sitkLandmarkBasedTransformInitializerFilter.h"
#include "itkLandmarkBasedTransformInitializerFilter.h"

// Additional include files
#include "sitkTransform.h"
// Done with additional include files

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
LandmarkBasedTransformInitializerFilter::LandmarkBasedTransformInitializerFilter ()
{

    this->m_FixedLandmarks = std::vector<double>();
    this->m_MovingLandmarks = std::vector<double>();
    this->m_LandmarkWeight = std::vector<double>();
    this->m_ReferenceImage = Image();
    this->m_BSplineNumberOfControlPoints = 4u;

  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 2 > ();


  
}

//
// Destructor
//
LandmarkBasedTransformInitializerFilter::~LandmarkBasedTransformInitializerFilter ()
{

}



//
// ToString
//
std::string LandmarkBasedTransformInitializerFilter::ToString() const
{
  std::ostringstream out;
  out << "itk::simple::LandmarkBasedTransformInitializerFilter\n";
  out << "  FixedLandmarks: ";
  this->ToStringHelper(out, this->m_FixedLandmarks);
  out << std::endl;
  out << "  MovingLandmarks: ";
  this->ToStringHelper(out, this->m_MovingLandmarks);
  out << std::endl;
  out << "  LandmarkWeight: ";
  this->ToStringHelper(out, this->m_LandmarkWeight);
  out << std::endl;
  out << "  ReferenceImage: ";
  this->ToStringHelper(out, this->m_ReferenceImage);
  out << std::endl;
  out << "  BSplineNumberOfControlPoints: ";
  this->ToStringHelper(out, this->m_BSplineNumberOfControlPoints);
  out << std::endl;

  out << ProcessObject::ToString();
  return out.str();
}

//
// Execute
//
Image LandmarkBasedTransformInitializerFilter::Execute ( const Transform & transform, std::vector<double> fixedLandmarks, std::vector<double> movingLandmarks, std::vector<double> landmarkWeight, Image referenceImage, unsigned int bSplineNumberOfControlPoints )
{
  this->SetFixedLandmarks ( fixedLandmarks );
  this->SetMovingLandmarks ( movingLandmarks );
  this->SetLandmarkWeight ( landmarkWeight );
  this->SetReferenceImage ( referenceImage );
  this->SetBSplineNumberOfControlPoints ( bSplineNumberOfControlPoints );

  return this->Execute ( transform );
}


Image LandmarkBasedTransformInitializerFilter::Execute ( const Transform & transform )
{
  PixelIDValueEnum type = transform.GetPixelID();
  unsigned int dimension = transform.GetDimension();

  return this->m_MemberFactory->GetMemberFunction( type, dimension )( &transform );
}


//-----------------------------------------------------------------------------

//
// Custom Casts
//
namespace {

}

//-----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image LandmarkBasedTransformInitializerFilter::ExecuteInternal ( const Transform * inTransform )
{
  // Define the input and output image types
  typedef TImageType     InputImageType;
        

  //Define output image type
  typedef float OutputImageType;



  typedef itk::LandmarkBasedTransformInitializer< itk::AffineTransform< double, TImageType::ImageDimension  >, TImageType, TImageType> FilterType;
  // Set up the ITK filter
  typename FilterType::Pointer filter = FilterType::New();


  assert( inTransform != NULL );
  const typename FilterType::TransformType *itkTx = dynamic_cast<const typename FilterType::TransformType *>(inTransform->GetITKBase() );
  if ( !itkTx )
    {
    sitkExceptionMacro( "Unexpected error converting transform! Possible miss matching dimensions!" );
    }
  else { filter->SetTransform( const_cast<typename FilterType::TransformType*>(itkTx) ); }


  filter->SetFixedLandmarks ( this->m_FixedLandmarks );
  filter->SetMovingLandmarks ( this->m_MovingLandmarks );
  filter->SetLandmarkWeight ( this->m_LandmarkWeight );
  filter->SetReferenceImage ( this->m_ReferenceImage );
  filter->SetBSplineNumberOfControlPoints ( this->m_BSplineNumberOfControlPoints );




  this->PreUpdate( filter.GetPointer() );



  // Run the ITK filter and return the output as a SimpleITK image
  filter->Update();



  typename FilterType::OutputImageType *itkOutImage = filter->GetOutput();
  this->FixNonZeroIndex( itkOutImage );
  return Image( this->CastITKToImage(itkOutImage) );

}

//-----------------------------------------------------------------------------


//
// Function to run the Execute method of this filter
//
Image LandmarkBasedTransformInitializer ( const Transform & transform, std::vector<double> fixedLandmarks, std::vector<double> movingLandmarks, std::vector<double> landmarkWeight, Image referenceImage, unsigned int bSplineNumberOfControlPoints )
{
  LandmarkBasedTransformInitializerFilter filter;
  return filter.Execute ( transform, fixedLandmarks, movingLandmarks, landmarkWeight, referenceImage, bSplineNumberOfControlPoints );
}


} // end namespace simple
} // end namespace itk
