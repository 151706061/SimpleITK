/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
/*
 * WARNING: DO NOT EDIT THIS FILE!
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE SIMPLEITK BUILD PROCESS.
 * Please look at sitkImageFilterTemplate.cxx.in to make changes.
 */

#include "itkImage.h"
#include "itkVectorImage.h"
#include "itkLabelMap.h"
#include "itkLabelObject.h"
#include "itkNumericTraits.h"
#include "itkNumericTraitsVariableLengthVectorPixel.h"
#include "itkVectorIndexSelectionCastImageFilter.h"
#include "itkComposeImageFilter.h"

#include "sitkBSplineTransformInitializer.h"
#include "itkBSplineTransformInitializer.h"

// Additional include files
#include "sitkTransform.h"
// Done with additional include files

namespace itk {
namespace simple {

//-----------------------------------------------------------------------------

//
// Default constructor that initializes parameters
//
BSplineTransformInitializer::BSplineTransformInitializer ()
{

    this->m_TransformDomainMeshSize = std::vector<uint32_t>(3, 1u);

  this->m_MemberFactory.reset( new detail::MemberFunctionFactory<MemberFunctionType>( this ) );

  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 3 > ();
  this->m_MemberFactory->RegisterMemberFunctions< PixelIDTypeList, 2 > ();


  
}

//
// Destructor
//
BSplineTransformInitializer::~BSplineTransformInitializer ()
{

}



//
// ToString
//
std::string BSplineTransformInitializer::ToString() const
{
  std::ostringstream out;
  out << "itk::simple::BSplineTransformInitializer\n";
  out << "  TransformDomainMeshSize: ";
  this->ToStringHelper(out, this->m_TransformDomainMeshSize);
  out << std::endl;

  out << ProcessObject::ToString();
  return out.str();
}

//
// Execute
//
Image BSplineTransformInitializer::Execute ( const Image& image1, const std::vector<uint32_t> & transformDomainMeshSize )
{
  this->SetTransformDomainMeshSize ( transformDomainMeshSize );

  return this->Execute ( image1 );
}


Image BSplineTransformInitializer::Execute ( const Image& image1 )
{
  PixelIDValueEnum type = image1.GetPixelID();
  unsigned int dimension = image1.GetDimension();


  return this->m_MemberFactory->GetMemberFunction( type, dimension )( image1 );
}


//-----------------------------------------------------------------------------

//
// Custom Casts
//
namespace {

}

//-----------------------------------------------------------------------------

//
// ExecuteInternal
//
template <class TImageType>
Image BSplineTransformInitializer::ExecuteInternal ( const Image& inImage1 )
{
  // Define the input and output image types
  typedef TImageType     InputImageType;
        

  //Define output image type
  typedef float OutputImageType;

  // Get the pointer to the ITK image contained in image1
  typename InputImageType::ConstPointer image1 = this->CastImageToITK<InputImageType>( inImage1 );


  typedef itk::BSplineTransformInitializer< itk::BSplineTransform< double, TImageType::ImageDimension, 3 >, TImageType> FilterType;
  // Set up the ITK filter
  typename FilterType::Pointer filter = FilterType::New();

filter->SetInput( 0, image1 );



  nil itkVecTransformDomainMeshSize = sitkSTLVectorToITK<nil>( this->GetTransformDomainMeshSize() );
  filter->SetTransformDomainMeshSize( itkVecTransformDomainMeshSize );




  this->PreUpdate( filter.GetPointer() );



  // Run the ITK filter and return the output as a SimpleITK image
  filter->Update();



  typename FilterType::OutputImageType *itkOutImage = filter->GetOutput();
  this->FixNonZeroIndex( itkOutImage );
  return Image( this->CastITKToImage(itkOutImage) );

}

//-----------------------------------------------------------------------------


//
// Function to run the Execute method of this filter
//
Image BSplineTransformInitializer ( const Image& image1, const std::vector<uint32_t> & transformDomainMeshSize )
{
  BSplineTransformInitializer filter;
  return filter.Execute ( image1, transformDomainMeshSize );
}


} // end namespace simple
} // end namespace itk
