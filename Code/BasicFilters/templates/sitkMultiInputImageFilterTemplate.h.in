/*=========================================================================
*
*  Copyright Insight Software Consortium
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*         http://www.apache.org/licenses/LICENSE-2.0.txt
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*=========================================================================*/
#ifndef __sitk${name}ImageFilter_h
#define __sitk${name}ImageFilter_h

$(include DoNotEditWarning.h.in)

#include <memory>

#include "sitkBasicFilters.h"
#include "sitkImageFilter.h"

namespace itk {
  namespace simple {

   /**\class ${name}ImageFilter
     *
     * $(if briefdescription then OUT=[[\brief ${briefdescription}]] end)
     * $(if detaileddescription then OUT=[[${detaileddescription}]] end)
     *
     * \sa itk::simple::${name} for the procedual interface
     */
    class SITKBasicFilters_EXPORT ${name}ImageFilter
      : public ImageFilter<3>
    {
    public:
      typedef ${name}ImageFilter Self;

      /** Default Constructor that takes no arguments and initializes
       * default parameters */
      ${name}ImageFilter();

      /** Define the pixels types supported by this filter */
      typedef ${pixel_types}  PixelIDTypeList;

$(include PublicDeclarations.h.in)
$(include MemberGetSetDeclarations.h.in)
$(include ClassNameAndPrint.h.in)

      /** Execute the filter on the input images */
      Image Execute ( const Image& image1 );
      Image Execute ( const Image& image1, const Image& image2 );
      Image Execute ( const Image& image1, const Image& image2, const Image& image3 );
      Image Execute ( std::vector<Image> &images);
$(if members and #members > 0 then
OUT=[[

      /** Execute the filter on the input images with the given parameters */
      Image Execute ( const Image& image1$(foreach members ,
        ${type} in${name}) );
      Image Execute ( const Image& image1, const Image& image2$(foreach members ,
        ${type} in${name}) );
      Image Execute ( const Image& image1, const Image& image2, const Image& image3$(foreach members ,
        ${type} in${name}) );
      Image Execute ( std::vector<Image> &images$(foreach members ,
        ${type} in${name}) );
]]end)

$(include CustomMethods.h.in)

    private:

      /** Setup for member function dispatching */

      typedef Image (Self::*MemberFunctionType)( std::vector<Image> & );
      template <class TImageType> Image ExecuteInternal ( std::vector<Image> &images );

$(if vector_pixel_types_by_component then
      throw 'vector_pixel_types_by_component must not be set with multi image filters'
end)

$(include MemberFunctionDispatch.h.in)

$(include PrivateMemberDeclarations.h.in)$(include ClassEnd.h.in)


    /**
     * \brief itk::simple::${name}ImageFilter Procedural Interface
     *
     * This function directly calls the execute method of ${name}ImageFilter
     * in order to support a procedual API
     *
     * \sa itk::simple::${name}ImageFilter for the object oriented interface
     */
     SITKBasicFilters_EXPORT Image ${name} ( const Image &image1$(when members $(foreach members ,
      ${type} in${name} = ${default})) );
SITKBasicFilters_EXPORT Image ${name} ( const Image &image1, const Image &image2$(when members $(foreach members ,
      ${type} in${name} = ${default})) );
SITKBasicFilters_EXPORT Image ${name} ( const Image &image1, const Image &image2, const Image &image3$(when members $(foreach members ,
      ${type} in${name} = ${default})) );
     SITKBasicFilters_EXPORT Image ${name} ( std::vector<Image> &images$(when members $(foreach members ,
      ${type} in${name} = ${default})) );

}
}
#endif
