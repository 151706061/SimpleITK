
$(if measurements then
temp=false
for i = 1,#measurements do
  if measurements[i].active then
    temp=true
  end
end
if temp then
OUT=OUT..[[

  // release the old filter ( and output data )
  if ( this->m_Filter != nullptr)
    {
]]
for i = 1,#measurements do
  if measurements[i].active then
    OUT=OUT..'      this->m_pfGet'..measurements[i].name..' = nullptr;\
'
  end
end

OUT=OUT..[[
      this->m_Filter->UnRegister();
      this->m_Filter = nullptr;
    }

  this->m_Filter = filter;
  this->m_Filter->Register();
]]
end
  end)

  this->PreUpdate( filter.GetPointer() );

$(if measurements then
for i = 1,#measurements do
  if measurements[i].active then
    OUT=OUT..'  this->m_pfGet'..measurements[i].name..' = [f = filter.GetPointer()] '
    if measurements[i].parameters then
      OUT=OUT..'( '
      for inum=1,#measurements[i].parameters do
        if (inum ~= 1) then
          OUT=OUT..', '
        end
        OUT=OUT.."auto && "..measurements[i].parameters[inum].name
      end
      OUT=OUT..') '
    end
    OUT=OUT..' { '

    if measurements[i].itk_get then
      if measurements[i].type == 'void' then
        OUT=OUT..'return '..measurements[i].itk_get..';}; //'
      else
        OUT=OUT..'const auto value = '..measurements[i].itk_get..'; '
      end
    elseif measurements[i].label_map then
      OUT=OUT..'const auto &value = '..'f->GetOutput()->GetLabelObject(label)->Get'..measurements[i].name ..'();'
    else
      OUT=OUT..'const auto &value = f->Get'..measurements[i].name..'('
      if measurements[i].parameters then
        for inum=1,#measurements[i].parameters do
          if (inum ~= 1) then
            OUT=OUT..', '
          end
          OUT=OUT.."std::forward<decltype("..measurements[i].parameters[inum].name..")>("..measurements[i].parameters[inum].name..")"
        end
      end
      OUT=OUT..'); '
    end

    if measurements[i].custom_cast then
      OUT=OUT..'using T = typename std::remove_cv< typename std::remove_reference<decltype(value)>::type>::type; '
      OUT=OUT..'return '..measurements[i].custom_cast..';'
    else
      OUT=OUT..'return value;'
    end
    OUT=OUT..'};\
'
  end
end
end)

  // Run the ITK filter and return the output as a SimpleITK image
  filter->Update();

$(when measurements $(foreach measurements
$(if not active and custom_itk_cast then
  OUT=[[  ${custom_itk_cast}]]
elseif not active then
  OUT=[[  this->m_${name} = filter->Get${name}();
]]
end)))

$(if no_return_image then
OUT=[[
  return;
]]
else
OUT=[[
  typename FilterType::OutputImageType::Pointer itkOutImage{ filter->GetOutput()};
  filter = nullptr;
  this->FixNonZeroIndex( itkOutImage.GetPointer() );
  return Image{ this->CastITKToImage( itkOutImage.GetPointer() ) };
]]
end)
